{"version":3,"sources":["helpers/urls.js","helpers/utils.js","actions/actionTypes.js","actions/products.js","components/Navbar.js","components/ProductList.js","components/Product.js","components/AddProduct.js","components/ProductDetail.js","components/App.js","reducers/index.js","index.js","store/index.js"],"names":["API_ROOT","APIUrls","id","notify","type","data","notification","success","message","style","borderRadius","backgroundColor","borderColor","error","UPDATE_PRODUCTS","ADD_PRODUCT_TO_LIST","UPDATE_PRODUCT_IN_LIST","DELETE_PRODUCT_FROM_LIST","ADD_TO_CART","REMOVE_FROM_CART","addNewProduct","product","dispatch","a","url","fetch","method","headers","body","JSON","stringify","response","json","addProductToList","updateProduct","updateProductToList","removeProductFromList","addToCart","removeFromCart","Navbar","props","count","theme","mode","defaultSelectedKeys","Item","to","size","color","className","ProductList","products","useState","sort","setSort","sortedList","setSortedList","list","setList","edit","setEdit","useEffect","sortList","concat","item1","item2","price","handleEdit","handleCancel","handleSort","value","onClick","map","Meta","Card","connect","state","cart","loading","setLoading","handleDelete","deleteProduct","handleUpdateProduct","values","inCart","findIndex","item","title","hoverable","width","marginTop","actions","form","htmlType","handleRemoveFromCart","handleAddToCart","initialValues","onFinish","hidden","name","avatar","src","image","height","margin","rules","required","placeholder","description","min","disabled","defaultValue","rating","padding","span","label","gutter","wrapperCol","offset","useParams","setProduct","index","parseInt","brand","generation","category","alt","Header","Layout","Content","position","zIndex","length","minHeight","exact","path","component","initialProductsState","showCart","combineReducers","action","filteredList","filter","filterCart","filteredCart","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0002fe54.chunk.js","sourcesContent":["// base url\r\nconst API_ROOT = 'https://my-json-server.typicode.com/GursimratRai/json-server';\r\n\r\nexport const APIUrls = {\r\n  //url for fetching all the products \r\n  fetchProducts: () => `${API_ROOT}/products`,\r\n  //url for deleting the product from the DB\r\n  deleteProduct: (id) => `${API_ROOT}/products/${id}`,\r\n  //url for adding new product in the DB\r\n  addProduct : () => `${API_ROOT}/products`,\r\n  //url for updating the product in the DB\r\n  updateProduct : (id)=> `${API_ROOT}/products/${id}`\r\n};\r\n","//antd component\r\nimport { notification } from \"antd\";\r\n\r\n//function for handling / showing notification or alert\r\nexport function notify(type, data) {\r\n    if (type === \"success\") {\r\n      notification.success({\r\n        message: data,\r\n        style: {\r\n          borderRadius: 5,\r\n          backgroundColor: \"#9cda7e\",\r\n          borderColor: \"#2f6316\",\r\n        },\r\n      });\r\n    } else {\r\n      notification.error({\r\n        message: data,\r\n        style: {\r\n          borderRadius: 5,\r\n          backgroundColor: \"#e89795\",\r\n          borderColor: \"#880411\",\r\n        },\r\n      });\r\n    }\r\n  }\r\n  ","//for fetching all products from an api\r\nexport const UPDATE_PRODUCTS = \"UPDATES_PRODUCTS\"; \r\n\r\n//for creating , deleting and updating the product\r\nexport const ADD_PRODUCT_TO_LIST = \"ADD_PRODUCT_TO_LIST\";\r\nexport const UPDATE_PRODUCT_IN_LIST = \"UPDATE_PRODUCT_IN_LIST\";\r\nexport const DELETE_PRODUCT_FROM_LIST = \"DELETE_PRODUCT_FROM_LIST\";\r\n\r\n//for cart\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\n","//api urls\r\nimport { APIUrls } from \"../helpers/urls\";\r\n//notifications\r\nimport { notify } from \"../helpers/utils\";\r\n//action types\r\nimport {\r\n  ADD_PRODUCT_TO_LIST,\r\n  ADD_TO_CART,\r\n  DELETE_PRODUCT_FROM_LIST,\r\n  UPDATE_PRODUCT_IN_LIST,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_PRODUCTS,\r\n} from \"./actionTypes\";\r\n\r\n//function for fetching / loading all products from an api\r\nexport function fetchProducts() {\r\n  return async (dispatch) => {\r\n    try {\r\n      let url = await APIUrls.fetchProducts();\r\n      let response = await fetch(url);\r\n      let data = await response.json();\r\n      dispatch(updateProducts(data));\r\n    } catch (error) {\r\n      notify(\"error\", \"Something went wrong !!!\");\r\n    }\r\n  };\r\n}\r\n\r\n//action for updating products in list \r\nexport function updateProducts(products) {\r\n  return {\r\n    type: UPDATE_PRODUCTS,\r\n    products,\r\n  };\r\n}\r\n\r\n//function for adding new product in the list\r\nexport function addNewProduct(product) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const url = APIUrls.addProduct();\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(product),\r\n      });\r\n      const data = await response.json();\r\n      dispatch(addProductToList(data));\r\n      notify(\"success\", \"New Product added Successfully\");\r\n    } catch {\r\n      notify(\"error\", \"Something went wrong !!!\");\r\n    }\r\n  };\r\n}\r\n\r\n//action for adding the new product\r\nexport function addProductToList(product) {\r\n  return {\r\n    type: ADD_PRODUCT_TO_LIST,\r\n    product,\r\n  };\r\n}\r\n\r\n//function for handling edit/updating of the product\r\nexport function updateProduct(product) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const url = APIUrls.updateProduct(product.id);\r\n      const response = await fetch(url, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(product),\r\n      });\r\n\r\n      const data = await response.json();\r\n      dispatch(updateProductToList(data));\r\n      notify(\"success\", \"Product updated Successfully\");\r\n    } catch (error) {\r\n      notify(\"error\", \"Something went wrong !!!\");\r\n    }\r\n  };\r\n}\r\n\r\n//action for updating the  product in the list\r\nexport function updateProductToList(product) {\r\n  return {\r\n    type: UPDATE_PRODUCT_IN_LIST,\r\n    product,\r\n  };\r\n}\r\n\r\n//function for handling the deletion of the product from the list\r\nexport function deleteProduct(product) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const url = APIUrls.deleteProduct(product.id);\r\n      await fetch(url, { method: \"DELETE\"});\r\n      dispatch(removeProductFromList(product));\r\n      notify(\"success\", \"Product Delete Successfully\");\r\n    } catch (error) {\r\n      notify(\"error\", \"Something went wrong !!!\");\r\n    }\r\n  };\r\n}\r\n\r\n//action for deleting the product\r\nexport function removeProductFromList(product) {\r\n  return {\r\n    type: DELETE_PRODUCT_FROM_LIST,\r\n    product,\r\n  };\r\n}\r\n\r\n//action for adding the product in the cart \r\nexport function addToCart(product) {\r\n  return {\r\n    type: ADD_TO_CART,\r\n    product,\r\n  };\r\n}\r\n\r\n//action for removing the product from the cart\r\nexport function removeFromCart(product) {\r\n  return {\r\n    type: REMOVE_FROM_CART,\r\n    product,\r\n  };\r\n}\r\n","import React from \"react\";\r\n//antd components\r\nimport { Menu , Badge , Avatar} from \"antd\";\r\n//link from react router dom\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Navbar = (props) => {\r\n\r\n  //Number of items / products in the cart\r\n  const { count} = props;\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Menu theme=\"light\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\r\n          {/* link for home / all products */}\r\n          <Menu.Item key=\"1\"><Link to=\"/\" >Products</Link></Menu.Item>\r\n          {/* link for adding new product  */}\r\n          <Menu.Item key=\"2\"><Link to=\"/add-product\" >Add A Product</Link> </Menu.Item>\r\n          {/* link for Cart and Icon with count  */}\r\n          <Menu.Item key=\"3\">  \r\n            <Badge  size=\"small\"  count={count}>\r\n              <Link to =\"/cart\" >\r\n                   <Avatar style={{color:'blue'}} size=\"large\"><i className=\"fas fa-shopping-cart\"></i></Avatar>\r\n              </Link>\r\n            </Badge>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from \"react\";\r\n//Components\r\nimport { Product } from \"./\";\r\n//antd components\r\nimport { Button } from \"antd\";\r\n\r\nconst ProductList = (props) => {\r\n  const { products } = props;\r\n  //for checking status of the sort button i.e. sorted / default\r\n  const [sort, setSort] = useState(false);\r\n  //sorted list\r\n  const [sortedList, setSortedList] = useState(products);\r\n  //default list\r\n  const [list, setList] = useState(products);\r\n  //for handling which product to be edited.\r\n  const [edit, setEdit] = useState(-1);\r\n\r\n  //for sorting the product list\r\n  useEffect(() => {\r\n    const sortList = []\r\n      .concat(list)\r\n      .sort((item1, item2) => (item1.price >= item2.price ? 1 : -1));\r\n    setSortedList(sortList);\r\n  }, [list]);\r\n\r\n  //function for handling the edit button functionality\r\n  const handleEdit = (id) => {\r\n    setEdit(id);\r\n  };\r\n\r\n  //function for handling the cancellation fuctionality\r\n  const handleCancel = () => {\r\n    setEdit(-1);\r\n  };\r\n\r\n  //function for handling sort Preview button functionality\r\n  const handleSort = async(value) => {\r\n    if (value) {\r\n     //if value is true -> display the sorted list\r\n      setSort(value);\r\n      setList(sortedList);\r\n    } else {\r\n     //if value is false -> display the default list\r\n      setSort(value);\r\n      setList(products);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {sort ? (\r\n        <Button onClick={() => handleSort(false)}>X</Button>\r\n      ) : (\r\n        <Button onClick={() => handleSort(true)}>Sorted Preview</Button>\r\n      )}\r\n      {list.map((product) => {\r\n        return (\r\n          <Product\r\n            edit={edit}\r\n            handleEdit={handleEdit}\r\n            handleCancel={handleCancel}\r\n            key={product.id}\r\n            product={product}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductList;","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n//actions\r\nimport { deleteProduct, addToCart, removeFromCart,\r\n updateProduct,\r\n} from \"../actions/products\";\r\n//antd components\r\nimport { Form, Card, Avatar, Button, Rate, Input, InputNumber } from \"antd\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst Product = (props) => {\r\n  const { product, cart, edit, handleEdit, handleCancel } = props;\r\n  //handling loading\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //function for handling delete functionality\r\n  const handleDelete = (product) => {\r\n    setLoading(true);\r\n    props.dispatch(deleteProduct(product));\r\n    setLoading(false);\r\n  };\r\n\r\n  //function for adding the product in the cart\r\n  const handleAddToCart = (product) => {\r\n    props.dispatch(addToCart(product));\r\n  };\r\n\r\n  //function for removing the product from the cart\r\n  const handleRemoveFromCart = (product) => {\r\n    props.dispatch(removeFromCart(product));\r\n  };\r\n\r\n  //function for handling update in the product\r\n  const handleUpdateProduct = async (values) => {\r\n    setLoading(true);\r\n    await props.dispatch(updateProduct(values));\r\n    setLoading(false);\r\n  };\r\n\r\n  //function for checking if the product is present in cart or not\r\n  const inCart = () => {\r\n    let index = cart.findIndex((item) => item.title === product.title);\r\n    if (index !== -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  //Card contains Form for editing / display the product\r\n  return (\r\n    <div>\r\n      <Card\r\n        hoverable\r\n        style={{ width: \"80vw\", marginTop: 10 }}\r\n        actions={\r\n          edit === product.id\r\n            ? [\r\n                <Button onClick={handleCancel} type=\"secondary\">\r\n                  Cancel\r\n                </Button>,\r\n                <Button\r\n                  loading={loading}\r\n                  type=\"primary\"\r\n                  form={`update-form${product.id}`}\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Save\r\n                </Button>,\r\n              ]\r\n            : [\r\n                <i\r\n                  onClick={() => handleEdit(product.id)}\r\n                  className=\"fas fa-pencil-alt\"\r\n                ></i>,\r\n                <i\r\n                  onClick={() => handleDelete(product)}\r\n                  className=\"fas fa-trash\"\r\n                ></i>,\r\n                <Button\r\n                  onClick={\r\n                    inCart()\r\n                      ? () => handleRemoveFromCart(product)\r\n                      : () => handleAddToCart(product)\r\n                  }\r\n                  type={inCart() ? \"danger\" : \"primary\"}\r\n                >\r\n                  {inCart() ? \"Remove From Cart\" : \"Add To Cart\"}\r\n                </Button>,\r\n              ]\r\n        }\r\n      >\r\n        <Form\r\n          initialValues={product}\r\n          onFinish={handleUpdateProduct}\r\n          id={`update-form${product.id}`}\r\n        >\r\n          <Form.Item hidden name=\"id\"></Form.Item>\r\n\r\n          <Meta\r\n            avatar={\r\n              <Avatar src={product.image} style={{ width: 100, height: 100 }} />\r\n            }\r\n            title={\r\n              edit === product.id ? (\r\n                <Form.Item\r\n                  name=\"title\"\r\n                  style={{ margin: 0 }}\r\n                  rules={[\r\n                    { required: true, message: \"Please input Product Name\" },\r\n                  ]}\r\n                >\r\n                  <Input placeholder={\"Enter Product Name\"} />\r\n                </Form.Item>\r\n              ) : (\r\n                <Link to={`/product/${product.id}`}>{product.title}</Link>\r\n              )\r\n            }\r\n            description={\r\n              edit === product.id ? (\r\n                <Form.Item\r\n                  name=\"price\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"Please input Price\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <InputNumber min={0} style={{ width: 200 }} />\r\n                </Form.Item>\r\n              ) : (\r\n                <span>Rs {product.price}</span>\r\n              )\r\n            }\r\n          />\r\n          {edit === product.id ? (\r\n            <Form.Item style={{ margin: 0 }} name=\"rating\">\r\n              <Rate style={{ backgroundColor: \"white\" }} />\r\n            </Form.Item>\r\n          ) : (\r\n            <Rate disabled defaultValue={product.rating} />\r\n          )}\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\n//function which passes the state to component as props\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cart: state.products.cart,\r\n  };\r\n}\r\n\r\n//define type for the cart\r\nProduct.propTypes = {\r\n  cart: PropTypes.array.isRequired,\r\n};\r\n\r\n//connecting the component to redux store\r\nexport default connect(mapStateToProps)(Product);\r\n","import React , {useState} from \"react\";\r\nimport {connect} from 'react-redux';\r\n//antd components\r\nimport { Form, Input, Button, Row, Col, InputNumber, Rate } from \"antd\";\r\n//actions\r\nimport { addNewProduct } from \"../actions/products\";\r\n\r\n//Component contains form for adding the new product in the list\r\nconst AddProduct = (props) => {\r\n\r\n  const [loading,setLoading] = useState(false);\r\n\r\n  //function for handling submission of the form\r\n  const onFinish = async(values) => {\r\n    setLoading(true);\r\n    await props.dispatch(addNewProduct(values));\r\n    setLoading(false);\r\n  };\r\n\r\n  //FORM\r\n  return (\r\n    <div style={{ backgroundColor: \"white\", padding: 20 }}>\r\n      <Form\r\n        name=\"basic\"\r\n        initialValues={{}}\r\n        onFinish={onFinish}\r\n      >\r\n                                                                                     {/* Title Of the Product */}\r\n        <Row>\r\n          <Col span={24}>\r\n            <Form.Item\r\n              label=\"Product Name\"\r\n              name=\"title\"\r\n              rules={[{ required: true, message: \"Please input Product Name\" }]}\r\n            >\r\n              <Input placeholder={\"Enter Product Name\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n                                                                                   {/* Brand name of the Product */}\r\n        <Row gutter={48}>\r\n          <Col span={12}>\r\n            <Form.Item\r\n              label=\"Brand\"\r\n              name=\"brand\"\r\n              rules={[{ required: true, message: \"Please input Brand Name\" }]}\r\n            >\r\n              <Input placeholder={\"Enter Brand Name\"} />\r\n            </Form.Item>\r\n          </Col>\r\n                                                                                            {/* Generation */}\r\n          <Col span={12}>\r\n            <Form.Item\r\n              label=\"Generation\"\r\n              name=\"generation\"\r\n              rules={[{ required: true, message: \"Please input Generation\" }]}\r\n            >\r\n              <Input placeholder={\"Enter Generation\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={48}>\r\n                                                                                          {/* Display Size */}\r\n          <Col span={12}>\r\n            <Form.Item\r\n              label=\"Display Size\"\r\n              name=\"display-size\"\r\n              rules={[\r\n                { required: true, message: \"Please input Size of the display\" },\r\n              ]}\r\n            >\r\n              <Input placeholder={\"Enter Display Dimensions\"} />\r\n            </Form.Item>\r\n          </Col>\r\n                                                                                       {/* Operating System */}\r\n          <Col span={12}>\r\n            <Form.Item\r\n              label=\"Operating System\"\r\n              name=\"operating-system\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input Operating System Name\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder={\"Enter Operating System Name\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row gutter={48}>\r\n                                                                                      {/* Price of the product */}\r\n          <Col span={8}>\r\n            <Form.Item label=\"Price\">\r\n              <Form.Item\r\n                name=\"price\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input Price\",\r\n                  },\r\n                ]}\r\n              >\r\n                <InputNumber min={0} style={{ width: 200 }} />\r\n              </Form.Item>\r\n            </Form.Item>\r\n          </Col>\r\n                                                                                               {/* category */}\r\n          <Col span={8}>\r\n            <Form.Item\r\n              label=\"Category\"\r\n              name=\"category\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input Category\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder={\"Enter Category\"} />\r\n            </Form.Item>\r\n          </Col>\r\n                                                                                               {/* Rating  */}\r\n          <Col span={8}>\r\n            <Form.Item name=\"rating\" label=\"Rate\">\r\n              <Rate style={{ backgroundColor: \"white\" }} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n                                                                                    {/* Image Url of the Product */}\r\n          <Col span={24}>\r\n            <Form.Item\r\n              label=\"Image\"\r\n              name=\"image\"\r\n              rules={[{ required: true, message: \"Please enter Image Url\" }]}\r\n            >\r\n              <Input placeholder={\"Enter Image Url\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n                                                                                 {/* Description of the Product */}\r\n          <Col span={24}>\r\n            <Form.Item\r\n              label=\"Description\"\r\n              name=\"description\"\r\n              rules={[{ required: true, message: \"Please enter Description\" }]}\r\n            >\r\n              <Input placeholder={\"Enter Description\"} />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n                                                                                        {/* Submit Button */}\r\n        <Form.Item wrapperCol={{ offset: 22, span: 16 }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n            Add\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(AddProduct);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//for getting the params in the url of the page\r\nimport { useParams } from \"react-router-dom\";\r\n//antd componets\r\nimport { Row, Col, Rate, Button } from \"antd\";\r\n//actions\r\nimport { addToCart, removeFromCart } from \"../actions/products\";\r\n\r\nconst ProductDetail = (props) => {\r\n  const { products, cart } = props;\r\n  //id of the product in the url\r\n  const { id } = useParams();\r\n  const [product, setProduct] = useState({});\r\n\r\n  //function for getting the details of the product from the list of products\r\n  const getDetails = () => {\r\n    let index = products.findIndex((item) => parseInt(item.id) === parseInt(id));\r\n\r\n    if (index !== -1) {\r\n      setProduct(products[index]);\r\n    }\r\n  };\r\n\r\n  //function for adding the product in teh cart\r\n  const handleAddToCart = (product) => {\r\n    props.dispatch(addToCart(product));\r\n  };\r\n\r\n  //function for removing the product from the cart\r\n  const handleRemoveFromCart = (product) => {\r\n    props.dispatch(removeFromCart(product));\r\n  };\r\n\r\n  //function for checking whether the product is present in the cart or not\r\n  const inCart = () => {\r\n    let index = cart.findIndex((item) => item.title === product.title);\r\n    if (index !== -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  //loading the details of the product\r\n  useEffect(getDetails, [id,products]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={12}>\r\n                                                                                {/* Title of the product */}\r\n          <Row>\r\n            <b>Title :</b>\r\n            <span>{product.title}</span>\r\n          </Row>\r\n                                                                                 {/* Rating for the product */}\r\n          <Row>\r\n            <Rate disabled value={product.rating} />\r\n          </Row>\r\n                                                                                 {/* Price of the product  */}\r\n          <Row>\r\n            <b>Price : </b>\r\n            <span>Rs {product.price}</span>\r\n          </Row>\r\n                                                                      {/* Button for add / remove product from the cart */}\r\n          <Row>\r\n            <Button\r\n              onClick={\r\n                inCart()\r\n                  ? () => handleRemoveFromCart(product)\r\n                  : () => handleAddToCart(product)\r\n              }\r\n              type={inCart() ? \"danger\" : \"primary\"}\r\n            >\r\n              {inCart() ? \"Remove From Cart\" : \"Add To Cart\"}\r\n            </Button>\r\n          </Row>\r\n\r\n                                                                                       {/* Brand name */}\r\n          <Row>\r\n            <b>Brand :</b>\r\n            <span>{product.brand}</span>\r\n          </Row>\r\n\r\n                                                                                        {/* Generation */}\r\n          <Row>\r\n            <b>Generation :</b>\r\n            <span>{product.generation}</span>\r\n          </Row>\r\n\r\n                                                                                       {/* Display Size  */}\r\n          <Row>\r\n            <b>Display Size :</b>\r\n            <span>{product[\"display-size\"]}</span>\r\n          </Row>\r\n\r\n                                                                                      {/* Operating System */}\r\n          <Row>\r\n            <b>Operation System :</b>\r\n            <span>{product[\"operating-system\"]}</span>\r\n          </Row>\r\n\r\n                                                                                           {/* Category */}\r\n          <Row>\r\n            <b>Category :</b>\r\n            <span>{product.category}</span>\r\n          </Row>\r\n\r\n                                                                                         {/* Description */}\r\n          <Row>\r\n            <b>Description :</b>\r\n            <span>{product.description}</span>\r\n          </Row>\r\n        </Col>\r\n\r\n                                                                                     {/* Image of the product */}\r\n        <Col span={12}>\r\n          <img\r\n            src={product.image}\r\n            alt=\"Product\"\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(ProductDetail);\r\n","import React, {useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n//actions\nimport { fetchProducts } from \"../actions/products\";\n//Custom Components\nimport { Navbar, ProductList , AddProduct , ProductDetail} from \"./\";\n//antd components\nimport { Layout } from \"antd\";\n\nconst { Header, Content } = Layout;\n\nconst App = (props) => {\n\n  const {dispatch}=props;\n  //function for loading / pre-fetch all the products\n  useEffect(() => {\n    dispatch(fetchProducts());\n  },[dispatch]);\n\n  //list -> list of all products\n  //cart -> products in the cart\n  const {list , cart} = props;\n\n  return (\n    <div>\n      <Layout>\n        <Router>\n        {/* NAV BAR */}\n        <Header style={{ backgroundColor: \"white\", position: \"fixed\", zIndex: 1, width: \"100%\", }} >\n          <Navbar count={cart.length} />\n        </Header>\n        \n        {/* Container  */}\n        <Content className=\"site-layout\" style={{ padding: \"0 50px\", height:'100%', minHeight:'100vh', marginTop: 64 }} >\n          <div className=\"site-layout-background\" style={{padding: 24, minHeight: 380 ,height:'100%'}} >\n              <Switch>\n                {/* Home */}\n                <Route exact path=\"/\" component={() => <ProductList products={list} />} />\n                {/* Add New Product */}\n                <Route exact path=\"/add-product\" component={() => <AddProduct />} />\n                {/* Cart */}\n                <Route exact path=\"/cart\" component={() => <ProductList products={cart} />} />\n                {/* Product Detail Page */}\n                <Route path=\"/product/:id\" component={() => <ProductDetail products={list} cart={cart} />} />\n            </Switch>\n          </div>\n        </Content>\n        </Router>\n      </Layout>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    list: state.products.list,\n    cart:state.products.cart\n  };\n}\n\nApp.propTypes = {\n  list : PropTypes.array.isRequired,\n  cart : PropTypes.array.isRequired,\n};\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from \"redux\";\r\n//action types\r\nimport {\r\n  UPDATE_PRODUCTS,\r\n  UPDATE_PRODUCT_IN_LIST,\r\n  DELETE_PRODUCT_FROM_LIST,\r\n  ADD_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  ADD_PRODUCT_TO_LIST,\r\n} from \"../actions/actionTypes\";\r\n\r\n//Initial state\r\nconst initialProductsState = {\r\n  list: [],\r\n  cart: [],\r\n  showCart: false,\r\n};\r\n\r\n//reducer for produncts related actions\r\nexport function products(state = initialProductsState, action) {\r\n  switch (action.type) {\r\n    //fetched products store in the list\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.products,\r\n      };\r\n\r\n    //add new product in the list\r\n    case ADD_PRODUCT_TO_LIST:\r\n      return {\r\n        ...state,\r\n        list: [action.product, ...state.list],\r\n      };\r\n\r\n    //update product in the list\r\n    case UPDATE_PRODUCT_IN_LIST:\r\n      const index = state.list.findIndex(\r\n        (product) => product.id === action.product.id\r\n      );\r\n      if (index !== -1) {\r\n        state.list[index] = action.product;\r\n      }\r\n      return {\r\n        ...state,\r\n        list: state.list,\r\n      };\r\n\r\n    //delete the product from the list\r\n    case DELETE_PRODUCT_FROM_LIST:\r\n      const filteredList = state.list.filter(\r\n        (product) => product.title !== action.product.title\r\n      );\r\n\r\n      const filterCart = state.cart.filter(\r\n        (product) => product.title !== action.product.title\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        list: filteredList,\r\n        cart:filterCart\r\n      };\r\n\r\n    //add product in the cart\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [action.product, ...state.cart],\r\n      };\r\n\r\n    //remove product from the cart\r\n    case REMOVE_FROM_CART:\r\n      const filteredCart = state.cart.filter(\r\n        (product) => product.title !== action.product.title\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        cart: filteredCart,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//function which combines all the reducers\r\nexport default combineReducers({\r\n  products,\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './components/App';\n\nimport { configureStore } from \"./store\";\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);","import { createStore, applyMiddleware } from \"redux\";\r\n\r\n//thunk is a function that returns a function.\r\n//Used to manage and start asynchronous actions.\r\n//Return a function that accepts 'dispatch' so we can dispatch later\r\nimport thunk from \"redux-thunk\";\r\n\r\n//Every time an action is dispatched,the new state is computed and saved\r\n//logger is a middleware which helps in logging all actions and states after they are dispatched \r\n// import logger from \"redux-logger\";\r\n\r\n//Used to manage state in an application\r\n//reducers are the pure functions that takes the current state and action and return the new state and tell the store how to do\r\nimport reducer from \"../reducers\";\r\n\r\n//configuring for using the redux store.\r\nexport function configureStore() {\r\n  let store = createStore(reducer, applyMiddleware(thunk));\r\n  return store;\r\n}\r\n"],"sourceRoot":""}